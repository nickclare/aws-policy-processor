// NOTE: This code is automatically generated - do not update it manually

#[derive(Debug, Clone, Copy, std :: cmp :: PartialEq, std :: cmp :: Eq, std :: hash :: Hash)]
pub enum DsActions {
    AcceptSharedDirectory,
    AccessDsData,
    AddIpRoutes,
    AddRegion,
    AddTagsToResource,
    AuthorizeApplication,
    CancelSchemaExtension,
    CheckAlias,
    ConnectDirectory,
    CreateAlias,
    CreateComputer,
    CreateConditionalForwarder,
    CreateDirectory,
    CreateHybridAd,
    CreateIdentityPoolDirectory,
    CreateLogSubscription,
    CreateMicrosoftAd,
    CreateSnapshot,
    CreateTrust,
    DeleteAdAssessment,
    DeleteConditionalForwarder,
    DeleteDirectory,
    DeleteLogSubscription,
    DeleteSnapshot,
    DeleteTrust,
    DeregisterCertificate,
    DeregisterEventTopic,
    DescribeAdAssessment,
    DescribeCertificate,
    DescribeClientAuthenticationSettings,
    DescribeConditionalForwarders,
    DescribeDirectories,
    DescribeDirectoryDataAccess,
    DescribeDomainControllers,
    DescribeEventTopics,
    DescribeHybridAdUpdate,
    DescribeLdapsSettings,
    DescribeRegions,
    DescribeSettings,
    DescribeSharedDirectories,
    DescribeSnapshots,
    DescribeTrusts,
    DescribeUpdateDirectory,
    DisableClientAuthentication,
    DisableDirectoryDataAccess,
    DisableLdaps,
    DisableRadius,
    DisableRoleAccess,
    DisableSso,
    EnableClientAuthentication,
    EnableDirectoryDataAccess,
    EnableLdaps,
    EnableRadius,
    EnableRoleAccess,
    EnableSso,
    GetAuthorizedApplicationDetails,
    GetDirectoryLimits,
    GetSnapshotLimits,
    ListAdAssessments,
    ListAuthorizedApplications,
    ListCertificates,
    ListIpRoutes,
    ListLogSubscriptions,
    ListSchemaExtensions,
    ListTagsForResource,
    RegisterCertificate,
    RegisterEventTopic,
    RejectSharedDirectory,
    RemoveIpRoutes,
    RemoveRegion,
    RemoveTagsFromResource,
    ResetUserPassword,
    RestoreFromSnapshot,
    ShareDirectory,
    StartAdAssessment,
    StartSchemaExtension,
    UnauthorizeApplication,
    UnshareDirectory,
    UpdateAuthorizedApplication,
    UpdateConditionalForwarder,
    UpdateDirectory,
    UpdateDirectorySetup,
    UpdateHybridAd,
    UpdateNumberOfDomainControllers,
    UpdateRadius,
    UpdateSettings,
    UpdateTrust,
    VerifyTrust,
}
impl std::fmt::Display for DsActions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            DsActions::AcceptSharedDirectory => write!(f, "ds:AcceptSharedDirectory"),
            DsActions::AccessDsData => write!(f, "ds:AccessDSData"),
            DsActions::AddIpRoutes => write!(f, "ds:AddIpRoutes"),
            DsActions::AddRegion => write!(f, "ds:AddRegion"),
            DsActions::AddTagsToResource => write!(f, "ds:AddTagsToResource"),
            DsActions::AuthorizeApplication => write!(f, "ds:AuthorizeApplication"),
            DsActions::CancelSchemaExtension => write!(f, "ds:CancelSchemaExtension"),
            DsActions::CheckAlias => write!(f, "ds:CheckAlias"),
            DsActions::ConnectDirectory => write!(f, "ds:ConnectDirectory"),
            DsActions::CreateAlias => write!(f, "ds:CreateAlias"),
            DsActions::CreateComputer => write!(f, "ds:CreateComputer"),
            DsActions::CreateConditionalForwarder => write!(f, "ds:CreateConditionalForwarder"),
            DsActions::CreateDirectory => write!(f, "ds:CreateDirectory"),
            DsActions::CreateHybridAd => write!(f, "ds:CreateHybridAD"),
            DsActions::CreateIdentityPoolDirectory => write!(f, "ds:CreateIdentityPoolDirectory"),
            DsActions::CreateLogSubscription => write!(f, "ds:CreateLogSubscription"),
            DsActions::CreateMicrosoftAd => write!(f, "ds:CreateMicrosoftAD"),
            DsActions::CreateSnapshot => write!(f, "ds:CreateSnapshot"),
            DsActions::CreateTrust => write!(f, "ds:CreateTrust"),
            DsActions::DeleteAdAssessment => write!(f, "ds:DeleteADAssessment"),
            DsActions::DeleteConditionalForwarder => write!(f, "ds:DeleteConditionalForwarder"),
            DsActions::DeleteDirectory => write!(f, "ds:DeleteDirectory"),
            DsActions::DeleteLogSubscription => write!(f, "ds:DeleteLogSubscription"),
            DsActions::DeleteSnapshot => write!(f, "ds:DeleteSnapshot"),
            DsActions::DeleteTrust => write!(f, "ds:DeleteTrust"),
            DsActions::DeregisterCertificate => write!(f, "ds:DeregisterCertificate"),
            DsActions::DeregisterEventTopic => write!(f, "ds:DeregisterEventTopic"),
            DsActions::DescribeAdAssessment => write!(f, "ds:DescribeADAssessment"),
            DsActions::DescribeCertificate => write!(f, "ds:DescribeCertificate"),
            DsActions::DescribeClientAuthenticationSettings => {
                write!(f, "ds:DescribeClientAuthenticationSettings")
            }
            DsActions::DescribeConditionalForwarders => {
                write!(f, "ds:DescribeConditionalForwarders")
            }
            DsActions::DescribeDirectories => write!(f, "ds:DescribeDirectories"),
            DsActions::DescribeDirectoryDataAccess => write!(f, "ds:DescribeDirectoryDataAccess"),
            DsActions::DescribeDomainControllers => write!(f, "ds:DescribeDomainControllers"),
            DsActions::DescribeEventTopics => write!(f, "ds:DescribeEventTopics"),
            DsActions::DescribeHybridAdUpdate => write!(f, "ds:DescribeHybridADUpdate"),
            DsActions::DescribeLdapsSettings => write!(f, "ds:DescribeLDAPSSettings"),
            DsActions::DescribeRegions => write!(f, "ds:DescribeRegions"),
            DsActions::DescribeSettings => write!(f, "ds:DescribeSettings"),
            DsActions::DescribeSharedDirectories => write!(f, "ds:DescribeSharedDirectories"),
            DsActions::DescribeSnapshots => write!(f, "ds:DescribeSnapshots"),
            DsActions::DescribeTrusts => write!(f, "ds:DescribeTrusts"),
            DsActions::DescribeUpdateDirectory => write!(f, "ds:DescribeUpdateDirectory"),
            DsActions::DisableClientAuthentication => write!(f, "ds:DisableClientAuthentication"),
            DsActions::DisableDirectoryDataAccess => write!(f, "ds:DisableDirectoryDataAccess"),
            DsActions::DisableLdaps => write!(f, "ds:DisableLDAPS"),
            DsActions::DisableRadius => write!(f, "ds:DisableRadius"),
            DsActions::DisableRoleAccess => write!(f, "ds:DisableRoleAccess"),
            DsActions::DisableSso => write!(f, "ds:DisableSso"),
            DsActions::EnableClientAuthentication => write!(f, "ds:EnableClientAuthentication"),
            DsActions::EnableDirectoryDataAccess => write!(f, "ds:EnableDirectoryDataAccess"),
            DsActions::EnableLdaps => write!(f, "ds:EnableLDAPS"),
            DsActions::EnableRadius => write!(f, "ds:EnableRadius"),
            DsActions::EnableRoleAccess => write!(f, "ds:EnableRoleAccess"),
            DsActions::EnableSso => write!(f, "ds:EnableSso"),
            DsActions::GetAuthorizedApplicationDetails => {
                write!(f, "ds:GetAuthorizedApplicationDetails")
            }
            DsActions::GetDirectoryLimits => write!(f, "ds:GetDirectoryLimits"),
            DsActions::GetSnapshotLimits => write!(f, "ds:GetSnapshotLimits"),
            DsActions::ListAdAssessments => write!(f, "ds:ListADAssessments"),
            DsActions::ListAuthorizedApplications => write!(f, "ds:ListAuthorizedApplications"),
            DsActions::ListCertificates => write!(f, "ds:ListCertificates"),
            DsActions::ListIpRoutes => write!(f, "ds:ListIpRoutes"),
            DsActions::ListLogSubscriptions => write!(f, "ds:ListLogSubscriptions"),
            DsActions::ListSchemaExtensions => write!(f, "ds:ListSchemaExtensions"),
            DsActions::ListTagsForResource => write!(f, "ds:ListTagsForResource"),
            DsActions::RegisterCertificate => write!(f, "ds:RegisterCertificate"),
            DsActions::RegisterEventTopic => write!(f, "ds:RegisterEventTopic"),
            DsActions::RejectSharedDirectory => write!(f, "ds:RejectSharedDirectory"),
            DsActions::RemoveIpRoutes => write!(f, "ds:RemoveIpRoutes"),
            DsActions::RemoveRegion => write!(f, "ds:RemoveRegion"),
            DsActions::RemoveTagsFromResource => write!(f, "ds:RemoveTagsFromResource"),
            DsActions::ResetUserPassword => write!(f, "ds:ResetUserPassword"),
            DsActions::RestoreFromSnapshot => write!(f, "ds:RestoreFromSnapshot"),
            DsActions::ShareDirectory => write!(f, "ds:ShareDirectory"),
            DsActions::StartAdAssessment => write!(f, "ds:StartADAssessment"),
            DsActions::StartSchemaExtension => write!(f, "ds:StartSchemaExtension"),
            DsActions::UnauthorizeApplication => write!(f, "ds:UnauthorizeApplication"),
            DsActions::UnshareDirectory => write!(f, "ds:UnshareDirectory"),
            DsActions::UpdateAuthorizedApplication => write!(f, "ds:UpdateAuthorizedApplication"),
            DsActions::UpdateConditionalForwarder => write!(f, "ds:UpdateConditionalForwarder"),
            DsActions::UpdateDirectory => write!(f, "ds:UpdateDirectory"),
            DsActions::UpdateDirectorySetup => write!(f, "ds:UpdateDirectorySetup"),
            DsActions::UpdateHybridAd => write!(f, "ds:UpdateHybridAD"),
            DsActions::UpdateNumberOfDomainControllers => {
                write!(f, "ds:UpdateNumberOfDomainControllers")
            }
            DsActions::UpdateRadius => write!(f, "ds:UpdateRadius"),
            DsActions::UpdateSettings => write!(f, "ds:UpdateSettings"),
            DsActions::UpdateTrust => write!(f, "ds:UpdateTrust"),
            DsActions::VerifyTrust => write!(f, "ds:VerifyTrust"),
        }
    }
}
