// NOTE: This code is automatically generated - do not update it manually

#[derive(Debug, Clone, Copy, std :: cmp :: PartialEq, std :: cmp :: Eq, std :: hash :: Hash)]
pub enum OmicsActions {
    AbortMultipartReadSetUpload,
    AcceptShare,
    BatchDeleteReadSet,
    CancelAnnotationImportJob,
    CancelRun,
    CancelVariantImportJob,
    CompleteMultipartReadSetUpload,
    CreateAnnotationStore,
    CreateAnnotationStoreVersion,
    CreateMultipartReadSetUpload,
    CreateReferenceStore,
    CreateRunCache,
    CreateRunGroup,
    CreateSequenceStore,
    CreateShare,
    CreateVariantStore,
    CreateWorkflow,
    CreateWorkflowVersion,
    DeleteAnnotationStore,
    DeleteAnnotationStoreVersions,
    DeleteReference,
    DeleteReferenceStore,
    DeleteRun,
    DeleteRunCache,
    DeleteRunGroup,
    DeleteS3AccessPolicy,
    DeleteSequenceStore,
    DeleteShare,
    DeleteVariantStore,
    DeleteWorkflow,
    DeleteWorkflowVersion,
    GetAnnotationImportJob,
    GetAnnotationStore,
    GetAnnotationStoreVersion,
    GetReadSet,
    GetReadSetActivationJob,
    GetReadSetExportJob,
    GetReadSetImportJob,
    GetReadSetMetadata,
    GetReference,
    GetReferenceImportJob,
    GetReferenceMetadata,
    GetReferenceStore,
    GetRun,
    GetRunCache,
    GetRunGroup,
    GetRunTask,
    GetS3AccessPolicy,
    GetSequenceStore,
    GetShare,
    GetVariantImportJob,
    GetVariantStore,
    GetWorkflow,
    GetWorkflowVersion,
    ListAnnotationImportJobs,
    ListAnnotationStoreVersions,
    ListAnnotationStores,
    ListMultipartReadSetUploads,
    ListReadSetActivationJobs,
    ListReadSetExportJobs,
    ListReadSetImportJobs,
    ListReadSetUploadParts,
    ListReadSets,
    ListReferenceImportJobs,
    ListReferenceStores,
    ListReferences,
    ListRunCaches,
    ListRunGroups,
    ListRunTasks,
    ListRuns,
    ListSequenceStores,
    ListShares,
    ListTagsForResource,
    ListVariantImportJobs,
    ListVariantStores,
    ListWorkflowVersions,
    ListWorkflows,
    PutS3AccessPolicy,
    StartAnnotationImportJob,
    StartReadSetActivationJob,
    StartReadSetExportJob,
    StartReadSetImportJob,
    StartReferenceImportJob,
    StartRun,
    StartVariantImportJob,
    TagResource,
    UntagResource,
    UpdateAnnotationStore,
    UpdateAnnotationStoreVersion,
    UpdateRunCache,
    UpdateRunGroup,
    UpdateSequenceStore,
    UpdateVariantStore,
    UpdateWorkflow,
    UpdateWorkflowVersion,
    UploadReadSetPart,
}
impl std::fmt::Display for OmicsActions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            OmicsActions::AbortMultipartReadSetUpload => {
                write!(f, "omics:AbortMultipartReadSetUpload")
            }
            OmicsActions::AcceptShare => write!(f, "omics:AcceptShare"),
            OmicsActions::BatchDeleteReadSet => write!(f, "omics:BatchDeleteReadSet"),
            OmicsActions::CancelAnnotationImportJob => write!(f, "omics:CancelAnnotationImportJob"),
            OmicsActions::CancelRun => write!(f, "omics:CancelRun"),
            OmicsActions::CancelVariantImportJob => write!(f, "omics:CancelVariantImportJob"),
            OmicsActions::CompleteMultipartReadSetUpload => {
                write!(f, "omics:CompleteMultipartReadSetUpload")
            }
            OmicsActions::CreateAnnotationStore => write!(f, "omics:CreateAnnotationStore"),
            OmicsActions::CreateAnnotationStoreVersion => {
                write!(f, "omics:CreateAnnotationStoreVersion")
            }
            OmicsActions::CreateMultipartReadSetUpload => {
                write!(f, "omics:CreateMultipartReadSetUpload")
            }
            OmicsActions::CreateReferenceStore => write!(f, "omics:CreateReferenceStore"),
            OmicsActions::CreateRunCache => write!(f, "omics:CreateRunCache"),
            OmicsActions::CreateRunGroup => write!(f, "omics:CreateRunGroup"),
            OmicsActions::CreateSequenceStore => write!(f, "omics:CreateSequenceStore"),
            OmicsActions::CreateShare => write!(f, "omics:CreateShare"),
            OmicsActions::CreateVariantStore => write!(f, "omics:CreateVariantStore"),
            OmicsActions::CreateWorkflow => write!(f, "omics:CreateWorkflow"),
            OmicsActions::CreateWorkflowVersion => write!(f, "omics:CreateWorkflowVersion"),
            OmicsActions::DeleteAnnotationStore => write!(f, "omics:DeleteAnnotationStore"),
            OmicsActions::DeleteAnnotationStoreVersions => {
                write!(f, "omics:DeleteAnnotationStoreVersions")
            }
            OmicsActions::DeleteReference => write!(f, "omics:DeleteReference"),
            OmicsActions::DeleteReferenceStore => write!(f, "omics:DeleteReferenceStore"),
            OmicsActions::DeleteRun => write!(f, "omics:DeleteRun"),
            OmicsActions::DeleteRunCache => write!(f, "omics:DeleteRunCache"),
            OmicsActions::DeleteRunGroup => write!(f, "omics:DeleteRunGroup"),
            OmicsActions::DeleteS3AccessPolicy => write!(f, "omics:DeleteS3AccessPolicy"),
            OmicsActions::DeleteSequenceStore => write!(f, "omics:DeleteSequenceStore"),
            OmicsActions::DeleteShare => write!(f, "omics:DeleteShare"),
            OmicsActions::DeleteVariantStore => write!(f, "omics:DeleteVariantStore"),
            OmicsActions::DeleteWorkflow => write!(f, "omics:DeleteWorkflow"),
            OmicsActions::DeleteWorkflowVersion => write!(f, "omics:DeleteWorkflowVersion"),
            OmicsActions::GetAnnotationImportJob => write!(f, "omics:GetAnnotationImportJob"),
            OmicsActions::GetAnnotationStore => write!(f, "omics:GetAnnotationStore"),
            OmicsActions::GetAnnotationStoreVersion => write!(f, "omics:GetAnnotationStoreVersion"),
            OmicsActions::GetReadSet => write!(f, "omics:GetReadSet"),
            OmicsActions::GetReadSetActivationJob => write!(f, "omics:GetReadSetActivationJob"),
            OmicsActions::GetReadSetExportJob => write!(f, "omics:GetReadSetExportJob"),
            OmicsActions::GetReadSetImportJob => write!(f, "omics:GetReadSetImportJob"),
            OmicsActions::GetReadSetMetadata => write!(f, "omics:GetReadSetMetadata"),
            OmicsActions::GetReference => write!(f, "omics:GetReference"),
            OmicsActions::GetReferenceImportJob => write!(f, "omics:GetReferenceImportJob"),
            OmicsActions::GetReferenceMetadata => write!(f, "omics:GetReferenceMetadata"),
            OmicsActions::GetReferenceStore => write!(f, "omics:GetReferenceStore"),
            OmicsActions::GetRun => write!(f, "omics:GetRun"),
            OmicsActions::GetRunCache => write!(f, "omics:GetRunCache"),
            OmicsActions::GetRunGroup => write!(f, "omics:GetRunGroup"),
            OmicsActions::GetRunTask => write!(f, "omics:GetRunTask"),
            OmicsActions::GetS3AccessPolicy => write!(f, "omics:GetS3AccessPolicy"),
            OmicsActions::GetSequenceStore => write!(f, "omics:GetSequenceStore"),
            OmicsActions::GetShare => write!(f, "omics:GetShare"),
            OmicsActions::GetVariantImportJob => write!(f, "omics:GetVariantImportJob"),
            OmicsActions::GetVariantStore => write!(f, "omics:GetVariantStore"),
            OmicsActions::GetWorkflow => write!(f, "omics:GetWorkflow"),
            OmicsActions::GetWorkflowVersion => write!(f, "omics:GetWorkflowVersion"),
            OmicsActions::ListAnnotationImportJobs => write!(f, "omics:ListAnnotationImportJobs"),
            OmicsActions::ListAnnotationStoreVersions => {
                write!(f, "omics:ListAnnotationStoreVersions")
            }
            OmicsActions::ListAnnotationStores => write!(f, "omics:ListAnnotationStores"),
            OmicsActions::ListMultipartReadSetUploads => {
                write!(f, "omics:ListMultipartReadSetUploads")
            }
            OmicsActions::ListReadSetActivationJobs => write!(f, "omics:ListReadSetActivationJobs"),
            OmicsActions::ListReadSetExportJobs => write!(f, "omics:ListReadSetExportJobs"),
            OmicsActions::ListReadSetImportJobs => write!(f, "omics:ListReadSetImportJobs"),
            OmicsActions::ListReadSetUploadParts => write!(f, "omics:ListReadSetUploadParts"),
            OmicsActions::ListReadSets => write!(f, "omics:ListReadSets"),
            OmicsActions::ListReferenceImportJobs => write!(f, "omics:ListReferenceImportJobs"),
            OmicsActions::ListReferenceStores => write!(f, "omics:ListReferenceStores"),
            OmicsActions::ListReferences => write!(f, "omics:ListReferences"),
            OmicsActions::ListRunCaches => write!(f, "omics:ListRunCaches"),
            OmicsActions::ListRunGroups => write!(f, "omics:ListRunGroups"),
            OmicsActions::ListRunTasks => write!(f, "omics:ListRunTasks"),
            OmicsActions::ListRuns => write!(f, "omics:ListRuns"),
            OmicsActions::ListSequenceStores => write!(f, "omics:ListSequenceStores"),
            OmicsActions::ListShares => write!(f, "omics:ListShares"),
            OmicsActions::ListTagsForResource => write!(f, "omics:ListTagsForResource"),
            OmicsActions::ListVariantImportJobs => write!(f, "omics:ListVariantImportJobs"),
            OmicsActions::ListVariantStores => write!(f, "omics:ListVariantStores"),
            OmicsActions::ListWorkflowVersions => write!(f, "omics:ListWorkflowVersions"),
            OmicsActions::ListWorkflows => write!(f, "omics:ListWorkflows"),
            OmicsActions::PutS3AccessPolicy => write!(f, "omics:PutS3AccessPolicy"),
            OmicsActions::StartAnnotationImportJob => write!(f, "omics:StartAnnotationImportJob"),
            OmicsActions::StartReadSetActivationJob => write!(f, "omics:StartReadSetActivationJob"),
            OmicsActions::StartReadSetExportJob => write!(f, "omics:StartReadSetExportJob"),
            OmicsActions::StartReadSetImportJob => write!(f, "omics:StartReadSetImportJob"),
            OmicsActions::StartReferenceImportJob => write!(f, "omics:StartReferenceImportJob"),
            OmicsActions::StartRun => write!(f, "omics:StartRun"),
            OmicsActions::StartVariantImportJob => write!(f, "omics:StartVariantImportJob"),
            OmicsActions::TagResource => write!(f, "omics:TagResource"),
            OmicsActions::UntagResource => write!(f, "omics:UntagResource"),
            OmicsActions::UpdateAnnotationStore => write!(f, "omics:UpdateAnnotationStore"),
            OmicsActions::UpdateAnnotationStoreVersion => {
                write!(f, "omics:UpdateAnnotationStoreVersion")
            }
            OmicsActions::UpdateRunCache => write!(f, "omics:UpdateRunCache"),
            OmicsActions::UpdateRunGroup => write!(f, "omics:UpdateRunGroup"),
            OmicsActions::UpdateSequenceStore => write!(f, "omics:UpdateSequenceStore"),
            OmicsActions::UpdateVariantStore => write!(f, "omics:UpdateVariantStore"),
            OmicsActions::UpdateWorkflow => write!(f, "omics:UpdateWorkflow"),
            OmicsActions::UpdateWorkflowVersion => write!(f, "omics:UpdateWorkflowVersion"),
            OmicsActions::UploadReadSetPart => write!(f, "omics:UploadReadSetPart"),
        }
    }
}
