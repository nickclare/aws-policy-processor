// NOTE: This code is automatically generated - do not update it manually

#[derive(Debug, Clone, Copy, std :: cmp :: PartialEq, std :: cmp :: Eq, std :: hash :: Hash)]
pub enum EventsActions {
    ActivateEventSource,
    AllowVendedLogDeliveryForResource,
    CancelReplay,
    CreateApiDestination,
    CreateArchive,
    CreateConnection,
    CreateEndpoint,
    CreateEventBus,
    CreatePartnerEventSource,
    DeactivateEventSource,
    DeauthorizeConnection,
    DeleteApiDestination,
    DeleteArchive,
    DeleteConnection,
    DeleteEndpoint,
    DeleteEventBus,
    DeletePartnerEventSource,
    DeleteRule,
    DescribeApiDestination,
    DescribeArchive,
    DescribeConnection,
    DescribeEndpoint,
    DescribeEventBus,
    DescribeEventSource,
    DescribePartnerEventSource,
    DescribeReplay,
    DescribeRule,
    DisableRule,
    EnableRule,
    InvokeApiDestination,
    ListApiDestinations,
    ListArchives,
    ListConnections,
    ListEndpoints,
    ListEventBuses,
    ListEventSources,
    ListPartnerEventSourceAccounts,
    ListPartnerEventSources,
    ListReplays,
    ListRuleNamesByTarget,
    ListRules,
    ListTagsForResource,
    ListTargetsByRule,
    PutEvents,
    PutPartnerEvents,
    PutPermission,
    PutRule,
    PutTargets,
    RemovePermission,
    RemoveTargets,
    RetrieveConnectionCredentials,
    StartReplay,
    TagResource,
    TestEventPattern,
    UntagResource,
    UpdateApiDestination,
    UpdateArchive,
    UpdateConnection,
    UpdateEndpoint,
    UpdateEventBus,
}
impl std::fmt::Display for EventsActions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            EventsActions::ActivateEventSource => write!(f, "events:ActivateEventSource"),
            EventsActions::AllowVendedLogDeliveryForResource => {
                write!(f, "events:AllowVendedLogDeliveryForResource")
            }
            EventsActions::CancelReplay => write!(f, "events:CancelReplay"),
            EventsActions::CreateApiDestination => write!(f, "events:CreateApiDestination"),
            EventsActions::CreateArchive => write!(f, "events:CreateArchive"),
            EventsActions::CreateConnection => write!(f, "events:CreateConnection"),
            EventsActions::CreateEndpoint => write!(f, "events:CreateEndpoint"),
            EventsActions::CreateEventBus => write!(f, "events:CreateEventBus"),
            EventsActions::CreatePartnerEventSource => write!(f, "events:CreatePartnerEventSource"),
            EventsActions::DeactivateEventSource => write!(f, "events:DeactivateEventSource"),
            EventsActions::DeauthorizeConnection => write!(f, "events:DeauthorizeConnection"),
            EventsActions::DeleteApiDestination => write!(f, "events:DeleteApiDestination"),
            EventsActions::DeleteArchive => write!(f, "events:DeleteArchive"),
            EventsActions::DeleteConnection => write!(f, "events:DeleteConnection"),
            EventsActions::DeleteEndpoint => write!(f, "events:DeleteEndpoint"),
            EventsActions::DeleteEventBus => write!(f, "events:DeleteEventBus"),
            EventsActions::DeletePartnerEventSource => write!(f, "events:DeletePartnerEventSource"),
            EventsActions::DeleteRule => write!(f, "events:DeleteRule"),
            EventsActions::DescribeApiDestination => write!(f, "events:DescribeApiDestination"),
            EventsActions::DescribeArchive => write!(f, "events:DescribeArchive"),
            EventsActions::DescribeConnection => write!(f, "events:DescribeConnection"),
            EventsActions::DescribeEndpoint => write!(f, "events:DescribeEndpoint"),
            EventsActions::DescribeEventBus => write!(f, "events:DescribeEventBus"),
            EventsActions::DescribeEventSource => write!(f, "events:DescribeEventSource"),
            EventsActions::DescribePartnerEventSource => {
                write!(f, "events:DescribePartnerEventSource")
            }
            EventsActions::DescribeReplay => write!(f, "events:DescribeReplay"),
            EventsActions::DescribeRule => write!(f, "events:DescribeRule"),
            EventsActions::DisableRule => write!(f, "events:DisableRule"),
            EventsActions::EnableRule => write!(f, "events:EnableRule"),
            EventsActions::InvokeApiDestination => write!(f, "events:InvokeApiDestination"),
            EventsActions::ListApiDestinations => write!(f, "events:ListApiDestinations"),
            EventsActions::ListArchives => write!(f, "events:ListArchives"),
            EventsActions::ListConnections => write!(f, "events:ListConnections"),
            EventsActions::ListEndpoints => write!(f, "events:ListEndpoints"),
            EventsActions::ListEventBuses => write!(f, "events:ListEventBuses"),
            EventsActions::ListEventSources => write!(f, "events:ListEventSources"),
            EventsActions::ListPartnerEventSourceAccounts => {
                write!(f, "events:ListPartnerEventSourceAccounts")
            }
            EventsActions::ListPartnerEventSources => write!(f, "events:ListPartnerEventSources"),
            EventsActions::ListReplays => write!(f, "events:ListReplays"),
            EventsActions::ListRuleNamesByTarget => write!(f, "events:ListRuleNamesByTarget"),
            EventsActions::ListRules => write!(f, "events:ListRules"),
            EventsActions::ListTagsForResource => write!(f, "events:ListTagsForResource"),
            EventsActions::ListTargetsByRule => write!(f, "events:ListTargetsByRule"),
            EventsActions::PutEvents => write!(f, "events:PutEvents"),
            EventsActions::PutPartnerEvents => write!(f, "events:PutPartnerEvents"),
            EventsActions::PutPermission => write!(f, "events:PutPermission"),
            EventsActions::PutRule => write!(f, "events:PutRule"),
            EventsActions::PutTargets => write!(f, "events:PutTargets"),
            EventsActions::RemovePermission => write!(f, "events:RemovePermission"),
            EventsActions::RemoveTargets => write!(f, "events:RemoveTargets"),
            EventsActions::RetrieveConnectionCredentials => {
                write!(f, "events:RetrieveConnectionCredentials")
            }
            EventsActions::StartReplay => write!(f, "events:StartReplay"),
            EventsActions::TagResource => write!(f, "events:TagResource"),
            EventsActions::TestEventPattern => write!(f, "events:TestEventPattern"),
            EventsActions::UntagResource => write!(f, "events:UntagResource"),
            EventsActions::UpdateApiDestination => write!(f, "events:UpdateApiDestination"),
            EventsActions::UpdateArchive => write!(f, "events:UpdateArchive"),
            EventsActions::UpdateConnection => write!(f, "events:UpdateConnection"),
            EventsActions::UpdateEndpoint => write!(f, "events:UpdateEndpoint"),
            EventsActions::UpdateEventBus => write!(f, "events:UpdateEventBus"),
        }
    }
}
